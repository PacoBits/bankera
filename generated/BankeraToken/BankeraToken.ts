// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Transfer1 extends ethereum.Event {
  get params(): Transfer1__Params {
    return new Transfer1__Params(this);
  }
}

export class Transfer1__Params {
  _event: Transfer1;

  constructor(event: Transfer1) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BankeraToken__rewardResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class BankeraToken__accountBalancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BankeraToken extends ethereum.SmartContract {
  static bind(address: Address): BankeraToken {
    return new BankeraToken("BankeraToken", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reward(param0: BigInt): BankeraToken__rewardResult {
    let result = super.call(
      "reward",
      "reward(uint64):(uint64,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BankeraToken__rewardResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_reward(param0: BigInt): ethereum.CallResult<BankeraToken__rewardResult> {
    let result = super.tryCall(
      "reward",
      "reward(uint64):(uint64,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BankeraToken__rewardResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isModifiedInRound(_address: Address, _round: BigInt): boolean {
    let result = super.call(
      "isModifiedInRound",
      "isModifiedInRound(address,uint64):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );

    return result[0].toBoolean();
  }

  try_isModifiedInRound(
    _address: Address,
    _round: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isModifiedInRound",
      "isModifiedInRound(address,uint64):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  calculateClaimableRewardTillRound(
    _address: Address,
    _claimTillRound: BigInt
  ): BigInt {
    let result = super.call(
      "calculateClaimableRewardTillRound",
      "calculateClaimableRewardTillRound(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_claimTillRound)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateClaimableRewardTillRound(
    _address: Address,
    _claimTillRound: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateClaimableRewardTillRound",
      "calculateClaimableRewardTillRound(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_claimTillRound)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseApproval(_spender: Address, _subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    _spender: Address,
    _subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  blocksPerRound(): BigInt {
    let result = super.call("blocksPerRound", "blocksPerRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blocksPerRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blocksPerRound",
      "blocksPerRound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountBalances(param0: Address): BankeraToken__accountBalancesResult {
    let result = super.call(
      "accountBalances",
      "accountBalances(address):(uint256,uint64,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BankeraToken__accountBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_accountBalances(
    param0: Address
  ): ethereum.CallResult<BankeraToken__accountBalancesResult> {
    let result = super.tryCall(
      "accountBalances",
      "accountBalances(address):(uint256,uint64,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BankeraToken__accountBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardTillRound(_claimTillRound: BigInt): BigInt {
    let result = super.call(
      "claimRewardTillRound",
      "claimRewardTillRound(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_claimTillRound)]
    );

    return result[0].toBigInt();
  }

  try_claimRewardTillRound(
    _claimTillRound: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardTillRound",
      "claimRewardTillRound(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_claimTillRound)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRound(): BigInt {
    let result = super.call("currentRound", "currentRound():(uint64)", []);

    return result[0].toBigInt();
  }

  try_currentRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentRound", "currentRound():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoundBalance(_address: Address, _round: BigInt): BigInt {
    let result = super.call(
      "getRoundBalance",
      "getRoundBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRoundBalance(
    _address: Address,
    _round: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoundBalance",
      "getRoundBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  calculateClaimableReward(_address: Address): BigInt {
    let result = super.call(
      "calculateClaimableReward",
      "calculateClaimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_calculateClaimableReward(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateClaimableReward",
      "calculateClaimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(a: BigInt, b: BigInt): BigInt {
    let result = super.call("safeSub", "safeSub(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(b)
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(a: BigInt, b: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeSub",
      "safeSub(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  safeDiv(a: BigInt, b: BigInt): BigInt {
    let result = super.call("safeDiv", "safeDiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(b)
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(a: BigInt, b: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeDiv",
      "safeDiv(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimReward(): BigInt {
    let result = super.call("claimReward", "claimReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimReward", "claimReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer1(_to: Address, _value: BigInt, _data: Bytes): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBoolean();
  }

  try_transfer1(
    _to: Address,
    _value: BigInt,
    _data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBalanceModificationRounds(_address: Address): Array<BigInt> {
    let result = super.call(
      "getBalanceModificationRounds",
      "getBalanceModificationRounds(address):(uint64[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getBalanceModificationRounds(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBalanceModificationRounds",
      "getBalanceModificationRounds(address):(uint64[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  safeMul(a: BigInt, b: BigInt): BigInt {
    let result = super.call("safeMul", "safeMul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(b)
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(a: BigInt, b: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMul",
      "safeMul(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseApproval(_spender: Address, _addedValue: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    _spender: Address,
    _addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(a: BigInt, b: BigInt): BigInt {
    let result = super.call("safeAdd", "safeAdd(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(a),
      ethereum.Value.fromUnsignedBigInt(b)
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(a: BigInt, b: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeAdd",
      "safeAdd(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer2(
    _to: Address,
    _value: BigInt,
    _data: Bytes,
    _custom_fallback: string
  ): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,uint256,bytes,string):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromString(_custom_fallback)
      ]
    );

    return result[0].toBoolean();
  }

  try_transfer2(
    _to: Address,
    _value: BigInt,
    _data: Bytes,
    _custom_fallback: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,uint256,bytes,string):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromString(_custom_fallback)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastBlockNumberInRound(): BigInt {
    let result = super.call(
      "lastBlockNumberInRound",
      "lastBlockNumberInRound():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastBlockNumberInRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastBlockNumberInRound",
      "lastBlockNumberInRound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuedTokensInRound(param0: BigInt): BigInt {
    let result = super.call(
      "issuedTokensInRound",
      "issuedTokensInRound(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_issuedTokensInRound(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuedTokensInRound",
      "issuedTokensInRound(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ResumeCall extends ethereum.Call {
  get inputs(): ResumeCall__Inputs {
    return new ResumeCall__Inputs(this);
  }

  get outputs(): ResumeCall__Outputs {
    return new ResumeCall__Outputs(this);
  }
}

export class ResumeCall__Inputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class ResumeCall__Outputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetRewardCall extends ethereum.Call {
  get inputs(): SetRewardCall__Inputs {
    return new SetRewardCall__Inputs(this);
  }

  get outputs(): SetRewardCall__Outputs {
    return new SetRewardCall__Outputs(this);
  }
}

export class SetRewardCall__Inputs {
  _call: SetRewardCall;

  constructor(call: SetRewardCall) {
    this._call = call;
  }

  get _roundNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundRewardInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardCall__Outputs {
  _call: SetRewardCall;

  constructor(call: SetRewardCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetBlocksPerRoundCall extends ethereum.Call {
  get inputs(): SetBlocksPerRoundCall__Inputs {
    return new SetBlocksPerRoundCall__Inputs(this);
  }

  get outputs(): SetBlocksPerRoundCall__Outputs {
    return new SetBlocksPerRoundCall__Outputs(this);
  }
}

export class SetBlocksPerRoundCall__Inputs {
  _call: SetBlocksPerRoundCall;

  constructor(call: SetBlocksPerRoundCall) {
    this._call = call;
  }

  get _newBlocksPerRound(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBlocksPerRoundCall__Outputs {
  _call: SetBlocksPerRoundCall;

  constructor(call: SetBlocksPerRoundCall) {
    this._call = call;
  }
}

export class ChangeContractOwnerCall extends ethereum.Call {
  get inputs(): ChangeContractOwnerCall__Inputs {
    return new ChangeContractOwnerCall__Inputs(this);
  }

  get outputs(): ChangeContractOwnerCall__Outputs {
    return new ChangeContractOwnerCall__Outputs(this);
  }
}

export class ChangeContractOwnerCall__Inputs {
  _call: ChangeContractOwnerCall;

  constructor(call: ChangeContractOwnerCall) {
    this._call = call;
  }

  get _newContractOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeContractOwnerCall__Outputs {
  _call: ChangeContractOwnerCall;

  constructor(call: ChangeContractOwnerCall) {
    this._call = call;
  }
}

export class IssueTokensCall extends ethereum.Call {
  get inputs(): IssueTokensCall__Inputs {
    return new IssueTokensCall__Inputs(this);
  }

  get outputs(): IssueTokensCall__Outputs {
    return new IssueTokensCall__Outputs(this);
  }
}

export class IssueTokensCall__Inputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IssueTokensCall__Outputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }
}

export class ChangeIssueManagerCall extends ethereum.Call {
  get inputs(): ChangeIssueManagerCall__Inputs {
    return new ChangeIssueManagerCall__Inputs(this);
  }

  get outputs(): ChangeIssueManagerCall__Outputs {
    return new ChangeIssueManagerCall__Outputs(this);
  }
}

export class ChangeIssueManagerCall__Inputs {
  _call: ChangeIssueManagerCall;

  constructor(call: ChangeIssueManagerCall) {
    this._call = call;
  }

  get _newIssueManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeIssueManagerCall__Outputs {
  _call: ChangeIssueManagerCall;

  constructor(call: ChangeIssueManagerCall) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class CreateRoundsCall extends ethereum.Call {
  get inputs(): CreateRoundsCall__Inputs {
    return new CreateRoundsCall__Inputs(this);
  }

  get outputs(): CreateRoundsCall__Outputs {
    return new CreateRoundsCall__Outputs(this);
  }
}

export class CreateRoundsCall__Inputs {
  _call: CreateRoundsCall;

  constructor(call: CreateRoundsCall) {
    this._call = call;
  }

  get maxRounds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateRoundsCall__Outputs {
  _call: CreateRoundsCall;

  constructor(call: CreateRoundsCall) {
    this._call = call;
  }
}

export class ClaimRewardTillRoundCall extends ethereum.Call {
  get inputs(): ClaimRewardTillRoundCall__Inputs {
    return new ClaimRewardTillRoundCall__Inputs(this);
  }

  get outputs(): ClaimRewardTillRoundCall__Outputs {
    return new ClaimRewardTillRoundCall__Outputs(this);
  }
}

export class ClaimRewardTillRoundCall__Inputs {
  _call: ClaimRewardTillRoundCall;

  constructor(call: ClaimRewardTillRoundCall) {
    this._call = call;
  }

  get _claimTillRound(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardTillRoundCall__Outputs {
  _call: ClaimRewardTillRoundCall;

  constructor(call: ClaimRewardTillRoundCall) {
    this._call = call;
  }

  get rewardAmountInWei(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get rewardAmountInWei(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Transfer1Call extends ethereum.Call {
  get inputs(): Transfer1Call__Inputs {
    return new Transfer1Call__Inputs(this);
  }

  get outputs(): Transfer1Call__Outputs {
    return new Transfer1Call__Outputs(this);
  }
}

export class Transfer1Call__Inputs {
  _call: Transfer1Call;

  constructor(call: Transfer1Call) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class Transfer1Call__Outputs {
  _call: Transfer1Call;

  constructor(call: Transfer1Call) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeRoundManagerCall extends ethereum.Call {
  get inputs(): ChangeRoundManagerCall__Inputs {
    return new ChangeRoundManagerCall__Inputs(this);
  }

  get outputs(): ChangeRoundManagerCall__Outputs {
    return new ChangeRoundManagerCall__Outputs(this);
  }
}

export class ChangeRoundManagerCall__Inputs {
  _call: ChangeRoundManagerCall;

  constructor(call: ChangeRoundManagerCall) {
    this._call = call;
  }

  get _newRoundManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRoundManagerCall__Outputs {
  _call: ChangeRoundManagerCall;

  constructor(call: ChangeRoundManagerCall) {
    this._call = call;
  }
}

export class ChangeRewardManagerCall extends ethereum.Call {
  get inputs(): ChangeRewardManagerCall__Inputs {
    return new ChangeRewardManagerCall__Inputs(this);
  }

  get outputs(): ChangeRewardManagerCall__Outputs {
    return new ChangeRewardManagerCall__Outputs(this);
  }
}

export class ChangeRewardManagerCall__Inputs {
  _call: ChangeRewardManagerCall;

  constructor(call: ChangeRewardManagerCall) {
    this._call = call;
  }

  get _newRewardManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRewardManagerCall__Outputs {
  _call: ChangeRewardManagerCall;

  constructor(call: ChangeRewardManagerCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Transfer2Call extends ethereum.Call {
  get inputs(): Transfer2Call__Inputs {
    return new Transfer2Call__Inputs(this);
  }

  get outputs(): Transfer2Call__Outputs {
    return new Transfer2Call__Outputs(this);
  }
}

export class Transfer2Call__Inputs {
  _call: Transfer2Call;

  constructor(call: Transfer2Call) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _custom_fallback(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class Transfer2Call__Outputs {
  _call: Transfer2Call;

  constructor(call: Transfer2Call) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _blocksPerRound(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _round(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
